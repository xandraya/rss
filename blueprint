# RSS and ATOM feed aggregator
- endpoints:
  # session managed by cookie session string
  # api's that require auth are only concerned with parsing the session
	- auth/local/login
	- auth/local/register
	- auth/google
  - api/scrape
    # uses scraper module to find all advertised feeds on a site
	- api/refresh
    # refreshes all subscriptions for a given folder
    # fetches and adds posts to the database
    # removes outdated posts and posts that go above the post limit
    - requires auth
    - called w/ (folder)
    - dump cache key 'user:folder' field 'flags'
  - api/remove
    # removes a subscription || folder
    - requires auth
    - called w/ (sub) || (folder)
    - dump cache hkey 'user:folder'
  - api/update
    # updates status table
    - requires auth
    - called w/ (post, opts: { read, starred })
    - dump cache hkey 'user:folder'
  - api/add/folder
    # creates a new folder
    - requires auth
    - called w/ (folder)
  - api/add/sub
    # binds a subscription to a folder
    - requires auth
    - called w/ (name, folder, feedurl)
  - api/fetch/folders
    # fetches all folder names
    - requires auth
    - push/update cache hkey 'user'
  - api/fetch/posts
    # fetches posts that belong to chosen folder subscriptions
    - requires auth
    - called w/ (folder, pagenum, opts?: { sort = date_desc, status? = [read?, starred?] })
    - push/update cache hash key 'user:folder:flags' field 'offset'
- cache schema:
  - user:folder 
    - tables: folder, sub, post, status
    - retunred cols: post.postid, post.title, post.content, status.stared, status.read
- db schema:
	# conforms to BCNF
  # has b-tree index on FKeys
	- account | userid, username, email, password, salt
	- folder | folderid, userid (CASCADE), name
	- feed | feedid, url, count
	- sub | subid, folderid (CASCADE), feedid, name, refresh_date
	- post | postid, feedid (CASCADE), title, date, ..., content
  - status | userid (CASCADE), postid (CASCADE), star, read

# extra
# sub rules
# youtube/podcasts?
# wrap feedparser into an async iterator
# feedparser stream writting buffer

/* todo
 * check js api:
  - AbortSignal
  - Buffer
 * test pg and redis concurency?
 * change nodejs default cyphers
 * recheck passport auth flow
 * initialize postgres with default user for testing
*/
